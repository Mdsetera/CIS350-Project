from poker_gui import *

# Generated by CodiumAI

import pytest
from game_model import *

# Generated by CodiumAI

import pytest

class TestColor:

    #  The Color enum can be instantiated with valid RGB values
    def test_valid_rgb_values(self):
        color = Color.GREEN
        assert color.value == (0, 128, 0)

    #  The Color enum cannot be instantiated with invalid RGB values
    def test_invalid_rgb_values(self):
        with pytest.raises(ValueError):
            color = Color((256, 0, 0))

    #  The Color enum values cannot be modified
    def test_cannot_modify_values(self):
        with pytest.raises(AttributeError):
            Color.GREEN = (0, 255, 0)


class TestCreateCards:

    #  The function displays the correct cards for each player and the table depending on the current round of betting.
    def test_display_correct_cards(self):
        game = Game()
        screen = pygame.Surface((800, 600))
        create_cards(game, screen)
        # Assert that the correct cards are displayed for each player and the table
        # based on the current round of betting

    #  The function handles the case where the game object is empty.
    def test_empty_game_object(self):
        game = Game()
        screen = pygame.Surface((800, 600))
        create_cards(game, screen)
        # Assert that the function handles the case where the game object is empty

    #  The function handles the case where the screen object is empty.
    def test_empty_screen_object(self):
        game = Game()
        screen = None
        create_cards(game, screen)
        # Assert that the function handles the case where the screen object is empty


class TestUpdate:

    #  updates the screen based on the current game state
    def test_updates_screen(self):
        game = Game()
        screen = pygame.display.set_mode((800, 600))
        clock = pygame.time.Clock()

        update(game, screen, clock)

        # Assert that the screen has been updated
        assert pygame.display.get_surface().get_flags() & pygame.SRCALPHA


class TestRedrawScreen:

    #  fills the screen with green color
    def test_fill_screen_with_green_color(self):
        # Arrange
        game = Game()
        screen = pygame.Surface((800, 600))
        clock = pygame.time.Clock()

        # Act
        redraw_screen(game, screen, clock)

        # Assert
        assert screen.get_at((0, 0)) == Color.GREEN.value


class TestCreateButtons:

    #  Creates four buttons with correct positions and text
    def test_create_buttons_positions_and_text(self):
        game = Game()
        create_buttons(game)
        assert len(gui.buttons) == 4
        assert gui.buttons[0].x == 600
        assert gui.buttons[0].y == 550
        assert gui.buttons[0].width == 100
        assert gui.buttons[0].height == 50
        assert gui.buttons[0].text == "Fold"
        assert gui.buttons[1].x == 710
        assert gui.buttons[1].y == 550
        assert gui.buttons[1].width == 100
        assert gui.buttons[1].height == 50
        assert gui.buttons[1].text == "Check"
        assert gui.buttons[2].x == 600
        assert gui.buttons[2].y == 610
        assert gui.buttons[2].width == 100
        assert gui.buttons[2].height == 50
        assert gui.buttons[2].text == "Call"
        assert gui.buttons[3].x == 710
        assert gui.buttons[3].y == 610
        assert gui.buttons[3].width == 100
        assert gui.buttons[3].height == 50
        assert gui.buttons[3].text == "Bet"

class TestUpdateLabels:

    #  Resets all labels used in the game
    def test_reset_labels(self):
        game = Game()
        create_labels(game)

        # Modify the labels to have some text
        for label in labels_chip_count + labels_player_bet + label_pot + label_dealer + label_current_player_turn:
            label.text = "Test"

        # Call the function to reset the labels
        update_labels(game)

        # Check that all labels have been reset to empty text
        for label in labels_chip_count + labels_player_bet + label_pot + label_dealer + label_current_player_turn:
            assert label.text == ""



class TestButton:

    #  Button can be created with x, y, width, height, text, font_size and enabled parameters
    def test_create_button_with_parameters(self):
        button = Button(100, 200, 50, 30, "Test", 20, True)
        assert button.x == 100
        assert button.y == 200
        assert button.width == 50
        assert button.height == 30
        assert button.text == "Test"
        assert button.font_size == 20
        assert button.enabled == True

    #  Button can check if the mouse is hovering over it
    def test_check_hover(self):
        button = Button(100, 200, 50, 30, "Test", 20, True)
        assert button.check_hover((110, 210)) == True
        assert button.check_hover((90, 190)) == False

    #  Button can be created with no font_size parameter
    def test_create_button_without_font_size_parameter(self):
        button = Button(100, 200, 50, 30, "Test")
        assert button.font_size == 20

    #  Button can be created with no enabled parameter
    def test_create_button_without_enabled_parameter(self):
        button = Button(100, 200, 50, 30, "Test", 20)
        assert button.enabled == True

    #  Button can be created with text parameter as None
    def test_create_button_with_text_parameter_as_none(self):
        button = Button(100, 200, 50, 30, None, 20, True)
        assert button.text == None


class TestSlider:

    #  Slider can be initialized with given parameters
    def test_initialize_with_given_parameters(self):
        slider = Slider(0, 0, 100, 20, 0, 10, 1)
        assert slider.x == 0
        assert slider.y == 0
        assert slider.width == 100
        assert slider.height == 20
        assert slider.minimum == 0
        assert slider.maximum == 10
        assert slider.step == 1
        assert slider.value == 0
        assert slider.slider_rect.x == 0
        assert slider.slider_rect.y == 6
        assert slider.slider_rect.width == 100
        assert slider.slider_rect.height == 6
        assert slider.pointer_rect.x == 0
        assert slider.pointer_rect.y == 0
        assert slider.pointer_rect.width == 20
        assert slider.pointer_rect.height == 20
        assert not slider.dragging

    #  Slider can be drawn on the screen
    def test_draw_on_screen(self):
        pygame.init()
        screen = pygame.display.set_mode((800, 600))
        slider = Slider(100, 100, 200, 20, 0, 10, 1)
        slider.draw(screen)
        pygame.display.flip()
        pygame.quit()

    #  Slider can be initialized with minimum and maximum values swapped
    def test_initialize_with_swapped_minimum_maximum(self):
        slider = Slider(0, 0, 100, 20, 10, 0, 1)
        assert slider.x == 0
        assert slider.y == 0
        assert slider.width == 100
        assert slider.height == 20
        assert slider.minimum == 10
        assert slider.maximum == 0
        assert slider.step == 1
        assert slider.value == 10
        assert slider.slider_rect.x == 0
        assert slider.slider_rect.y == 6
        assert slider.slider_rect.width == 100
        assert slider.slider_rect.height == 6
        assert slider.pointer_rect.x == 0
        assert slider.pointer_rect.y == 0
        assert slider.pointer_rect.width == 20
        assert slider.pointer_rect.height == 20
        assert not slider.dragging

    #  Slider can be initialized with minimum and maximum values equal
    def test_initialize_with_equal_minimum_maximum(self):
        slider = Slider(0, 0, 100, 20, 5, 5, 1)
        assert slider.x == 0
        assert slider.y == 0
        assert slider.width == 100
        assert slider.height == 20
        assert slider.minimum == 5
        assert slider.maximum == 5
        assert slider.step == 1
        assert slider.value == 5
        assert slider.slider_rect.x == 0
        assert slider.slider_rect.y == 6
        assert slider.slider_rect.width == 100
        assert slider.slider_rect.height == 6
        assert slider.pointer_rect.x == 0
        assert slider.pointer_rect.y == 0
        assert slider.pointer_rect.width == 20
        assert slider.pointer_rect.height == 20
        assert not slider.dragging




class TestChip:

    #  can create a Chip object with a given position
    def test_create_chip_with_given_position(self):
        chip = Chip((100, 200))
        assert chip.rect.topleft == (100, 200)

    #  can change the size of a Chip object
    def test_change_chip_size(self):
        chip = Chip((100, 200))
        chip.change_size(0.5)
        assert chip.rect.width == chip.original_image.get_width() * 0.5
        assert chip.rect.height == chip.original_image.get_height() * 0.5

    #  can create a Chip object with a position of (0,0)
    def test_create_chip_with_position_zero_zero(self):
        chip = Chip((0, 0))
        assert chip.rect.topleft == (0, 0)

    #  can create a Chip object with a position of (screen_width, screen_height)
    def test_create_chip_with_position_screen_width_screen_height(self):
        screen_width = 800
        screen_height = 600
        chip = Chip((screen_width, screen_height))
        assert chip.rect.topleft == (screen_width, screen_height)

    #  can create a Chip object with a position of (screen_width+1, screen_height+1)
    def test_create_chip_with_position_screen_width_plus_one_screen_height_plus_one(self):
        screen_width = 800
        screen_height = 600
        chip = Chip((screen_width + 1, screen_height + 1))
        assert chip.rect.topleft == (screen_width + 1, screen_height + 1)

    #  can change the size of a Chip object to (0,0)
    def test_change_chip_size_to_zero(self):
        chip = Chip((100, 200))
        chip.change_size(0)
        assert chip.rect.width == 0
        assert chip.rect.height == 0
